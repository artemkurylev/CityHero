// <auto-generated />
using System;
using CityHero.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CityHero.Data.Migrations
{
    [DbContext(typeof(CityHeroTestContext))]
    partial class CityHeroTestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CityHero.Models.Achievement", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("CityHero.Models.AnsweredQuestions", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("QuestionId")
                        .HasColumnName("question_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("answered_questions");
                });

            modelBuilder.Entity("CityHero.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("CityHero.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CityHero.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("CityHero.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("CityHero.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CityHero.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CityHero.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname")
                        .HasMaxLength(20);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CityHero.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CoordX")
                        .HasColumnName("coordX");

                    b.Property<float?>("CoordY")
                        .HasColumnName("coordY");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<int?>("IdType")
                        .HasColumnName("id_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("place");
                });

            modelBuilder.Entity("CityHero.Models.PlaceArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlaceId")
                        .HasColumnName("place_id");

                    b.Property<int>("PointId")
                        .HasColumnName("point_id");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("PointId");

                    b.ToTable("place_area");
                });

            modelBuilder.Entity("CityHero.Models.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CoordX")
                        .HasColumnName("coordX");

                    b.Property<float>("CoordY")
                        .HasColumnName("coordY");

                    b.HasKey("Id");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("CityHero.Models.Question", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnName("answer")
                        .HasMaxLength(20);

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnName("place_id")
                        .HasMaxLength(10);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("question");
                });

            modelBuilder.Entity("CityHero.Models.Test", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(10);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("CityHero.Models.VisitedPlaces", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("PlaceId")
                        .HasColumnName("place_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("visited_places");
                });

            modelBuilder.Entity("CityHero.Models.AnsweredQuestions", b =>
                {
                    b.HasOne("CityHero.Models.Question", "Question")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_answered_questions_ToTable_1");

                    b.HasOne("CityHero.Models.AspNetUsers", "User")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_answered_questions_ToTable");
                });

            modelBuilder.Entity("CityHero.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("CityHero.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CityHero.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("CityHero.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CityHero.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("CityHero.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CityHero.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("CityHero.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CityHero.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CityHero.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("CityHero.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CityHero.Models.PlaceArea", b =>
                {
                    b.HasOne("CityHero.Models.Place", "Place")
                        .WithMany("PlaceArea")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("FK_place_area_place");

                    b.HasOne("CityHero.Models.Point", "Point")
                        .WithMany("PlaceArea")
                        .HasForeignKey("PointId")
                        .HasConstraintName("FK_place_area_point");
                });

            modelBuilder.Entity("CityHero.Models.Test", b =>
                {
                    b.HasOne("CityHero.Models.AspNetUsers", "User")
                        .WithMany("Test")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Test_ToUsers");
                });

            modelBuilder.Entity("CityHero.Models.VisitedPlaces", b =>
                {
                    b.HasOne("CityHero.Models.Place", "Place")
                        .WithMany("VisitedPlaces")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("FK_visited_places_ToTable_1");

                    b.HasOne("CityHero.Models.AspNetUsers", "User")
                        .WithMany("VisitedPlaces")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_visited_places_ToTable");
                });
#pragma warning restore 612, 618
        }
    }
}
